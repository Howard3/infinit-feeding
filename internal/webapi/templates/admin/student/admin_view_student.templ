package studenttempl

import (
	"encoding/base64"
	"fmt"
	"geevly/gen/go/eda"
	"geevly/internal/student"
	"geevly/internal/webapi/templates/components"
	"github.com/Howard3/gosignal"
)

type ViewParams struct {
	ID        uint64
	Student   *eda.Student
	Version   uint64
	SchoolMap map[string]string
}

func base64Encode(b []byte) string {
	return base64.URLEncoding.WithPadding(base64.NoPadding).EncodeToString(b)
}

templ healthAssessmentsSection(healthAssessments []*eda.Student_HealthAssessment) {
	<div class="rounded-lg border bg-card text-card-foreground shadow-sm w-full mt-4" data-v0-t="card">
		<div class="flex flex-col space-y-1.5 p-6">
			<h3 class="text-2xl font-semibold whitespace-nowrap leading-none tracking-tight">
				Health Assessments
			</h3>
		</div>
		<div class="p-6 pt-0">
			if len(healthAssessments) == 0 {
				<div class="text-sm text-gray-500 p-2">No health assessments available</div>
			} else {
				<div class="border rounded-md overflow-x-auto">
					<table class="w-full text-sm">
						<thead>
							<tr class="bg-gray-100 border-b">
								<th class="py-3 px-4 text-left font-medium">Date</th>
								<th class="py-3 px-4 text-left font-medium">Height (cm)</th>
								<th class="py-3 px-4 text-left font-medium">Weight (kg)</th>
							</tr>
						</thead>
						<tbody>
							for _, assessment := range healthAssessments {
								<tr class="border-b hover:bg-gray-50">
									<td class="py-2 px-4">{ assessment.AssessmentDate.AsTime().Format("2006-01-02") }</td>
									<td class="py-2 px-4">{ fmt.Sprintf("%.1f", assessment.HeightCm) }</td>
									<td class="py-2 px-4">{ fmt.Sprintf("%.1f", assessment.WeightKg) }</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			}
		</div>
	</div>
}

templ AdminViewStudent(params ViewParams) {
	@backToList()
	<div class="w-full p-3 flex justify-center items-center flex-col">
		<h3>Student Feeding Report</h3>
		<div class="w-full p-3 flex justify-center items-center" id="calheatmap"></div>
	</div>
	@studentCalendarHeatmap(convertStudentFeedingToHeatmap(params.Student.GetFeedingReport()), "calheatmap")
	<div class="grid gap-6 md:grid-cols-2 m-3">
		<div class="space-y-4">
			<form>
				// Embed Personal Info Section
				@StudentPersonalInfoSection(params.Student, params.Version)
				// Embed Action Buttons Section
				@actionButtonsSection(params.ID, params.Student.Status, params.Student.EligibleForSponsorship, params.Version)
			</form>
			// Embed School Enrollment Section
			@schoolEnrollmentSection(params)
		</div>
		<div class="flex flex-col">
			<div class="flex flex-row gap-3">
				@profilePhoto(params)
				@codeSection(params)
			</div>
			// Embed Grade Reports Section
			@gradeReportsSection(params.Student.GradeHistory)
			// Embed Health Assessments Section
			@healthAssessmentsSection(params.Student.HealthAssessments)
			// Embed History Section
			<div hx-push-url="false" hx-trigger="load" hx-get={ fmt.Sprintf("/admin/student/%d/history", params.ID) } hx-target="this">
				Loading...
			</div>
		</div>
	</div>
}

func toggleStatusURL(id uint64, ver uint64, status eda.Student_Status) string {
	active := status == eda.Student_ACTIVE
	return fmt.Sprintf("/admin/student/%d/toggleStatus?ver=%d&active=%s", id, ver, fmt.Sprintf("%t", !active))
}

templ StudentPersonalInfoSection(student *eda.Student, ver uint64) {
	<div class="space-y-4" id="personal-info">
		@components.TextField("First Name", "first_name", "Enter the first name", student.FirstName)
		@components.TextField("Last Name", "last_name", "Enter the last name", student.LastName)
		@components.DateField("Date of Birth", "date_of_birth", fmt.Sprintf("%d-%02d-%02d", student.DateOfBirth.Year, student.DateOfBirth.Month, student.DateOfBirth.Day))
		@components.TextField("Student ID", "student_school_id", "Enter the student ID", student.StudentSchoolId)
		<label class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">Sex</label>
		@components.TomSelect(components.SelectConfig{
			Options: map[string]string{
				eda.Student_MALE.String():   "Male",
				eda.Student_FEMALE.String(): "Female",
			},
			MaxItems:    1,
			Name:        "sex",
			Placeholder: "Select a sex",
			Value:       student.Sex.Enum().String(),
		})
		<label class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">Grade Level</label>
		@components.TomSelect(components.SelectConfig{
			Options: map[string]string{
				"1": "1",
				"2": "2",
				"3": "3",
				"4": "4",
				"5": "5",
				"6": "6",
			},
			MaxItems:    1,
			Name:        "grade_level",
			Placeholder: "Select a grade level",
			Value:       fmt.Sprintf("%d", student.GradeLevel),
		})
		@components.HiddenField("version", fmt.Sprintf("%d", ver))
	</div>
}

templ actionButtonsSection(id uint64, status eda.Student_Status, eligibleForSponsorship bool, ver uint64) {
	<div class="flex items-center justify-between mt-4 gap-4">
		<div class="flex items-center space-x-4 bg-gray-100 p-4 rounded-lg border" hx-params="none">
			<div class="flex items-center space-x-2 bg-white p-4 rounded-lg border">
				if status == eda.Student_ACTIVE {
					<span class="text-sm font-medium text-green-500">Active</span>
				} else {
					<span class="text-sm font-medium text-red-500">Inactive</span>
				}
				<a
					hx-put={ toggleStatusURL(id, ver, status) }
					class="cursor-pointer inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 rounded-md px-3"
				>Toggle status</a>
			</div>
			<div class="flex items-center space-x-2 bg-white p-4 rounded-lg border">
				if eligibleForSponsorship {
					<span class="text-sm font-medium text-green-500">Eligible for Sponsorship</span>
				} else {
					<span class="text-sm font-medium text-red-500">Not Eligible for Sponsorship</span>
				}
				<a
					hx-put={ fmt.Sprintf("/admin/student/%d/eligibility?ver=%d&eligible=%t", id, ver, !eligibleForSponsorship) }
					class="cursor-pointer inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 rounded-md px-3"
				>Toggle</a>
			</div>
			@components.HiddenField("version", fmt.Sprintf("%d", ver))
		</div>
		@components.PrimaryButton("Update", templ.Attributes{
			"hx-post": fmt.Sprintf("/admin/student/%d", id),
		})
	</div>
}

templ schoolEnrollmentSection(params ViewParams) {
	<div class="grid gap-2">
		<label class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">School</label>
		<form class="grid gap-2" hx-push-url="false">
			@components.HiddenField("version", fmt.Sprintf("%d", params.Version))
			@components.TomSelect(components.SelectConfig{
				Options:     params.SchoolMap,
				MaxItems:    1,
				Name:        "school_id",
				Placeholder: "Select a school",
				Value:       params.Student.SchoolId,
			})
			@components.DateField("Enrollment Date", "enrollment_date", dateToFormDate(params.Student.DateOfEnrollment))
			<div class="grid gap-2">
				@components.PrimaryButton("Enroll", templ.Attributes{
					"hx-post": fmt.Sprintf("/admin/student/%d/enroll", params.ID),
				})
				@components.Button("Unenroll", templ.Attributes{
					"hx-delete":  fmt.Sprintf("/admin/student/%d/enrollment?version=%d", params.ID, params.Version),
					"hx-confirm": "Are you sure you want to unenroll this student?",
				})
			</div>
		</form>
	</div>
}

func dateToFormDate(date *eda.Date) string {
	if date == nil {
		return ""
	}
	return fmt.Sprintf("%d-%02d-%02d", date.Year, date.Month, date.Day)
}

templ StudentHistorySection(evts []gosignal.Event) {
	// TODO: pagination
	<div class="grid gap-2 pt-2">
		<div class="rounded-lg border bg-card text-card-foreground shadow-sm" data-v0-t="card">
			<div class="flex flex-col space-y-1.5 p-6">
				<h3 class="text-2xl font-semibold whitespace-nowrap leading-none tracking-tight">
					History ({ fmt.Sprintf("%d", len(evts)) } events)
				</h3>
			</div>
			<div class="p-0">
				<div id="history-events-container" class="grid min-w-[400px] w-full divide-y">
					for _, evt := range evts {
						<div class="grid grid-cols-3 items-center p-3 bg-gray-100 history-event">
							<div class="text-sm text-gray-500" hx-target="#content" hx-push-url="true">
								switch evt.Type {
									case student.EVENT_ADD_STUDENT:
										Student created
									case student.EVENT_UPDATE_STUDENT:
										Student updated
									case student.EVENT_SET_STUDENT_STATUS:
										Student status changed
									case student.EVENT_ENROLL_STUDENT:
										Student enrolled
									case student.EVENT_UNENROLL_STUDENT:
										Student unenrolled
									case student.EVENT_SET_LOOKUP_CODE:
										QR Lookup code updated
									case student.EVENT_SET_PROFILE_PHOTO:
										Profile photo updated
									case student.EVENT_FEED_STUDENT:
										Student fed
										@components.Button("View", templ.Attributes{
											"hx-get": fmt.Sprintf("/admin/student/%s/feedingReport/%d", evt.AggregateID, evt.Version),
										})
									case student.EVENT_UPDATE_SPONSORSHIP:
										Sponsorship updated
									case student.EVENT_SET_ELIGIBILITY:
										Eligibility updated
									case student.EVENT_ADD_GRADE_REPORT:
										Grade report added
									case student.EVENT_ADD_HEALTH_ASSESSMENT:
										Health assessment added
									default:
										Unknown event: { evt.Type }
								}
							</div>
							<div class="text-sm text-gray-500 text-right">{ evt.Timestamp.Format("2006-01-02 15:04") }</div>
						</div>
					}
				</div>
				<div class="p-4 text-center" id="view-more-container" style="display: none;">
					<button id="view-all-history-btn" class="inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 rounded-md px-3">
						View All History
					</button>
				</div>
			</div>
		</div>
	</div>
	<script>
		// History collapsing functionality
		(function() {
			const MAX_VISIBLE_EVENTS = 5;
			const eventsContainer = document.getElementById('history-events-container');
			const viewMoreContainer = document.getElementById('view-more-container');
			const viewAllBtn = document.getElementById('view-all-history-btn');
			const events = Array.from(eventsContainer.querySelectorAll('.history-event'));

			// If we have more events than the maximum to show
			if (events.length > MAX_VISIBLE_EVENTS) {
				// Hide all events except the last MAX_VISIBLE_EVENTS
				events.slice(0, events.length - MAX_VISIBLE_EVENTS).forEach(event => {
					event.style.display = 'none';
				});

				// Show the view more button
				viewMoreContainer.style.display = 'block';

				// Add click handler to view all button
				viewAllBtn.addEventListener('click', function() {
					// Show all events
					events.forEach(event => {
						event.style.display = 'grid';
					});
					// Hide the view more button
					viewMoreContainer.style.display = 'none';
				});
			}
		})();
	</script>
}

templ backToList() {
	<div class="border-b px-4 py-2 flex items-center gap-4 bg-gray-100">
		<a
			class="flex cursor-pointer items-center gap-2 text-gray-900 hover:text-gray-700 transition-colors"
			hx-get="/admin/student"
		>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="24"
				height="24"
				viewBox="0 0 24 24"
				fill="none"
				stroke="currentColor"
				stroke-width="2"
				stroke-linecap="round"
				stroke-linejoin="round"
				class="h-4 w-4"
			>
				<path d="m12 19-7-7 7-7"></path>
				<path d="M19 12H5"></path>
			</svg>
			Back to Students
		</a>
	</div>
}

templ codeSection(p ViewParams) {
	<div class="rounded-lg border bg-card text-card-foreground shadow-sm w-full max-w-sm" data-v0-t="card">
		<div class="space-y-1.5 flex flex-row bg-gray-100 p-4 rounded-t-lg w-full">
			<div class="grid gap-1.5 w-1/2">
				<h3 class="text-2xl font-semibold whitespace-nowrap leading-none tracking-tight">QR Code</h3>
			</div>
		</div>
		<div class="p-6 flex items-center justify-center">
			<div class="border border-gray-200 w-[250px] h-[250px] dark:border-gray-800">
				if len(p.Student.CodeUniqueId) == 0 {
					<div class="items-center justify-center p-3">
						No code. Click "Generate" to create a new one.
					</div>
				} else {
					<img
						src={ fmt.Sprintf("/admin/student/QRCode?data=%s", base64Encode(p.Student.GetCodeUniqueId())) }
						alt="QR Code"
						class="w-full h-full"
					/>
					<div class="text-center w-full text-xs">
						{ fmt.Sprintf("%s", p.Student.GetCodeUniqueId()) }
					</div>
				}
			</div>
		</div>
		<form class="flex items-center justify-center gap-2 w-full" hx-push-url="false">
			@components.HiddenField("version", fmt.Sprintf("%d", p.Version))
			<button
				class="inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 rounded-md px-3"
				hx-post={ fmt.Sprintf("/admin/student/%d/regenerateCode", p.ID) }
				hx-confirm="Are you sure you want to regenerate the code? Previous code will be invalidated and cannot be used anymore."
			>
				Regenerate
			</button>
		</form>
	</div>
}

templ profilePhoto(p ViewParams) {
	<form class="rounded-lg border bg-card text-card-foreground shadow-sm w-full max-w-sm" hx-encoding="multipart/form-data" hx-push-url="false">
		@components.HiddenField("version", fmt.Sprintf("%d", p.Version))
		<div class="space-y-1.5 flex flex-row bg-gray-100 p-4 rounded-t-lg w-full">
			<div class="grid gap-1.5 w-1/2">
				<h3 class="text-2xl font-semibold whitespace-nowrap leading-none tracking-tight">Profile Photo</h3>
			</div>
		</div>
		<div class="p-6 flex items-center justify-center">
			<div class="border border-gray-200 w-[250px] h-[250px] dark:border-gray-800">
				if p.Student.ProfilePhotoId == "" {
					<div class="items-center justify-center p-3">
						No photo
					</div>
				} else {
					<img src={ fmt.Sprintf("/student/profile/photo/%s", p.Student.ProfilePhotoId) } alt="Profile Photo" class="w-max-full h-max-full my-auto align-middle"/>
				}
			</div>
		</div>
		<div class="flex justify-center items-center mb-3">
			<label class="cursor-pointer flex justify-center items-center border border-gray-300 rounded-md py-2 px-4 text-sm transition-colors hover:bg-gray-50 ">
				<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4 mr-2">
					<path d="M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z"></path>
					<circle cx="12" cy="13" r="3"></circle>
				</svg>
				Choose File
				<input class="sr-only" id="photo" type="file" name="file" hx-post={ fmt.Sprintf(`/admin/student/%d/profilePhoto`, p.ID) } hx-trigger="change"/>
			</label>
		</div>
	</form>
}

templ gradeReportsSection(gradeReports []*eda.Student_GradeReport) {
	<div class="rounded-lg border bg-card text-card-foreground shadow-sm w-full mt-4" data-v0-t="card">
		<div class="flex flex-col space-y-1.5 p-6">
			<h3 class="text-2xl font-semibold whitespace-nowrap leading-none tracking-tight">
				Grade Reports
			</h3>
		</div>
		<div class="p-6 pt-0">
			if len(gradeReports) == 0 {
				<div class="text-sm text-gray-500 p-2">No grade reports available</div>
			} else {
				<div class="border rounded-md overflow-hidden">
					<table class="w-full text-sm">
						<thead>
							<tr class="bg-gray-100 border-b">
								<th class="py-3 px-4 text-left font-medium">Grade</th>
								<th class="py-3 px-4 text-left font-medium">Test Date</th>
								<th class="py-3 px-4 text-left font-medium">School Year</th>
								<th class="py-3 px-4 text-left font-medium">Grading Period</th>
							</tr>
						</thead>
						<tbody>
							for _, report := range gradeReports {
								<tr class="border-b hover:bg-gray-50">
									<td class="py-2 px-4">{ fmt.Sprintf("%d", report.Grade) }</td>
									<td class="py-2 px-4">{ dateToFormDate(report.TestDate) }</td>
									<td class="py-2 px-4">{ report.SchoolYear }</td>
									<td class="py-2 px-4">{ report.GradingPeriod }</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
			}
		</div>
	</div>
}
