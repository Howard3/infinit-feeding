package bulk_upload

import (
	"fmt"
	"geevly/gen/go/eda"
	"geevly/internal/bulk_upload"
	"geevly/internal/webapi/templates/components"
	"slices"
	"sort"
	"time"
)

templ ViewBulkUpload(agg *bulk_upload.Aggregate) {
	<div class="flex flex-col w-full ">
		<!-- Navigation bar -->
		<div class="flex items-center p-2 bg-gray-50 border-b">
			<a
				href="#"
				class="flex items-center text-gray-600 hover:text-gray-800"
				hx-get="/admin/bulk-upload"
				hx-target="#content"
			>
				<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
				</svg>
				Back to List
			</a>
		</div>
		<!-- Header with title and actions -->
		<div class="flex flex-col sm:flex-row sm:items-center justify-between p-4 bg-gray-100 gap-4">
			<div class="flex items-center gap-2">
				<h1 class="text-lg font-medium">Bulk Upload Details</h1>
				@viewStatusBadge(getStatus(agg))
			</div>
			<div class="flex flex-wrap gap-2">
				<!-- Primary actions -->
				if canValidate(getStatus(agg)) {
					@components.PrimaryButton("Validate", templ.Attributes{
						"hx-post":     fmt.Sprintf("/admin/bulk-upload/%s/validate", agg.ID),
						"hx-confirm":  "Are you sure you want to validate this upload?",
						"hx-push-url": "false",
					})
				}
				if canStartProcessing(getStatus(agg)) {
					@components.PrimaryButton("Start Processing", templ.Attributes{
						"hx-post":     fmt.Sprintf("/admin/bulk-upload/%s/start-processing", agg.ID),
						"hx-confirm":  "Are you sure you want to start processing this upload?",
						"hx-push-url": "false",
					})
				}
				if canLock(getStatus(agg)) {
					@components.SecondaryButton("Lock Upload", templ.Attributes{
						"hx-post":     fmt.Sprintf("/admin/bulk-upload/%s/lock", agg.ID),
						"hx-confirm":  "Are you sure you want to lock this upload? This action cannot be undone.",
						"hx-push-url": "false",
					})
				}
				<!-- Danger actions -->
				if canInvalidate(getStatus(agg)) {
					@components.DangerButton("Invalidate", templ.Attributes{
						"hx-post":    fmt.Sprintf("/admin/bulk-upload/%s/invalidate", agg.ID),
						"hx-confirm": "Are you sure you want to invalidate this upload? This will undo all changes made by this upload.",
					})
				}
				<a
					href={ templ.URL(fmt.Sprintf("/admin/bulk-upload/%s/download", agg.ID)) }
					class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
				>
					Download File
				</a>
			</div>
		</div>
		<div class="grid grid-cols-1 md:grid-cols-2 gap-4 p-4">
			<div class="border rounded-lg shadow p-4">
				<h2 class="text-md font-medium mb-3">General Information</h2>
				<div class="grid grid-cols-2 gap-y-2">
					<div class="text-sm font-semibold">ID:</div>
					<div class="text-sm">{ agg.ID }</div>
					<div class="text-sm font-semibold">Target Domain:</div>
					<div class="text-sm">
						@viewFormatDomain(getTargetDomain(agg))
					</div>
					<div class="text-sm font-semibold">File ID:</div>
					<div class="text-sm">{ agg.GetFileID() }</div>
					<div class="text-sm font-semibold">Status:</div>
					<div class="text-sm">
						@viewStatusBadge(getStatus(agg))
					</div>
					<div class="text-sm font-semibold">Status Details:</div>
					<div class="text-sm col-span-1">
						@viewStatusExplanation(getStatus(agg))
					</div>
				</div>
			</div>
			<div class="border rounded-lg shadow p-4">
				<h2 class="text-md font-medium mb-3">Progress & Actions</h2>
				if getTotalRecords(agg) > 0 {
					<div class="flex flex-col gap-2">
						<div class="grid grid-cols-3 gap-2 mb-2">
							<div class="bg-gray-100 p-3 rounded text-center">
								<div class="text-sm text-gray-600">Total</div>
								<div class="text-lg font-semibold">{ fmt.Sprintf("%d", getTotalRecords(agg)) }</div>
							</div>
							<div class="bg-gray-100 p-3 rounded text-center">
								<div class="text-sm text-gray-600">Processed</div>
								<div class="text-lg font-semibold">{ fmt.Sprintf("%d", getProcessedRecords(agg)) }</div>
							</div>
							<div class="bg-gray-100 p-3 rounded text-center">
								<div class="text-sm text-gray-600">Pending</div>
								<div class="text-lg font-semibold">{ fmt.Sprintf("%d", getTotalRecords(agg) - getProcessedRecords(agg)) }</div>
							</div>
						</div>
						<div class="w-full bg-gray-200 rounded-full h-2.5 mb-2">
							@viewProgressBarWithPercentage(
								int(getProcessedRecords(agg)),
								int(getTotalRecords(agg)),
								len(agg.GetValidationErrors()) > 0,
							)
						</div>
						<div class="text-sm text-center text-gray-600">
							if isProcessing(getStatus(agg)) {
								Processing...
							} else if getProcessedRecords(agg) == getTotalRecords(agg) {
								Processing complete
							} else {
								{ fmt.Sprintf("%.1f%% complete", float64(getProcessedRecords(agg))/float64(getTotalRecords(agg))*100) }
							}
						</div>
						<div class="text-sm mt-4 border-t pt-2">
							<div class="font-semibold mb-1">What You Can Do:</div>
							if getErrorMessage(agg) != "" {
								<div class="text-red-600 mb-2">⚠️ Error detected. See error message section below.</div>
							}
							<ul class="list-disc list-inside space-y-1">
								if canValidate(getStatus(agg)) {
									<li>Click the blue <strong>Validate</strong> button to validate the upload</li>
								}
								if canStartProcessing(getStatus(agg)) {
									<li>Click the blue <strong>Start Processing</strong> button to begin processing the upload</li>
								}
								if canCancel(getStatus(agg)) {
									<li>Click <strong>Cancel</strong> to stop the current operation</li>
								}
								if canInvalidate(getStatus(agg)) {
									<li>Click the red <strong>Invalidate</strong> button to revert all changes made by this upload</li>
								}
								<li>Click <strong>View File</strong> to view the uploaded file</li>
							</ul>
						</div>
					</div>
				} else {
					<div class="text-center text-gray-500 py-4">
						No processing data available
					</div>
				}
			</div>
		</div>
		<div class="grid grid-cols-1 md:grid-cols-2 gap-4 px-4">
			<div class="border rounded-lg shadow p-4">
				<h2 class="text-md font-medium mb-3">Status Timeline</h2>
				<div class="relative border-l-2 border-gray-200 ml-2 pl-4">
					if len(getStatusTimestamps(agg)) == 0 {
						<div class="text-sm text-gray-500">No status updates available</div>
					} else {
						for _, item := range getStatusTimestamps(agg) {
							<div class="mb-4 relative">
								<div class={ "absolute -left-6 mt-1 w-3 h-3 rounded-full " + item.Color }></div>
								<div class="text-sm font-semibold">{ item.Status }</div>
								<div class="text-xs text-gray-500">{ item.Timestamp }</div>
							</div>
						}
					}
				</div>
			</div>
			<div class="border rounded-lg shadow p-4">
				<h2 class="text-md font-medium mb-3">Upload Metadata</h2>
				if meta := getUploadMetadata(agg); len(meta) > 0 {
					<div class="grid grid-cols-2 gap-y-2">
						for key, value := range meta {
							<div class="text-sm font-semibold">{ key }:</div>
							if key == "school_id" {
								<div class="mt-1 p-2 bg-blue-50 border border-blue-200 rounded-md">
									<div class="flex items-center gap-2">
										<div class="text-sm text-blue-700 font-medium">School ID:</div>
										<a
											href={ templ.URL(fmt.Sprintf("/admin/school/%s", value)) }
											class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 font-medium text-base inline-flex items-center gap-1 min-w-[3rem] justify-center shadow-sm transition-colors"
										>
											<span>{ value }</span>
											<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
											</svg>
										</a>
									</div>
									<div class="text-xs text-blue-600 mt-1">
										Click to view school details
									</div>
								</div>
							} else {
								<div class="text-sm">{ value }</div>
							}
						}
					</div>
				} else {
					<div class="text-center text-gray-500 py-4">
						No metadata available
					</div>
				}
			</div>
		</div>
		if getErrorMessage(agg) != "" {
			<div class="p-4">
				<div class="border border-red-300 rounded-lg shadow p-4 bg-red-50">
					<h2 class="text-md font-medium mb-3 text-red-800">Error Message</h2>
					<div class="text-red-700 p-3 rounded-lg bg-white border border-red-200">
						{ getErrorMessage(agg) }
					</div>
				</div>
			</div>
		}
		if validationErrors := getValidationErrors(agg); len(validationErrors) > 0 {
			<div class="p-4">
				<div class="border rounded-lg shadow p-4">
					<h2 class="text-md font-medium mb-3">Validation Errors</h2>
					<div class="relative overflow-x-auto">
						<table class="w-full text-sm text-left text-gray-500">
							<thead class="text-xs text-gray-700 uppercase bg-gray-100">
								<tr>
									<th scope="col" class="px-6 py-3">Context</th>
									<th scope="col" class="px-6 py-3">Row</th>
									<th scope="col" class="px-6 py-3">Field</th>
									<th scope="col" class="px-6 py-3">Message</th>
								</tr>
							</thead>
							<tbody>
								for _, error := range validationErrors {
									<tr class="bg-white border-b hover:bg-gray-50">
										<td class="px-6 py-4">{ formatValidationContext(error.Context) }</td>
										<td class="px-6 py-4">{ fmt.Sprintf("%d", error.RowNumber) }</td>
										<td class="px-6 py-4">{ error.Field }</td>
										<td class="px-6 py-4">{ error.Message }</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>
			</div>
		} else if getStatus(agg) == "VALIDATION_FAILED" || getStatus(agg) == "COMPLETED" {
			<div class="p-4">
				<div class="border rounded-lg shadow p-4">
					<h2 class="text-md font-medium mb-3">Validation Errors</h2>
					<div class="text-center text-gray-500 py-4">
						No validation errors found.
					</div>
				</div>
			</div>
		}
		<!-- Record Processing Status Section -->
		if recordStatuses := getRecordProcessingStatuses(agg); len(recordStatuses) > 0 {
			<div class="p-4">
				<div class="border rounded-lg shadow p-4">
					<h2 class="text-md font-medium mb-3">Record Processing Status</h2>
					<div class="relative overflow-x-auto">
						<table class="w-full text-sm text-left text-gray-500">
							<thead class="text-xs text-gray-700 uppercase bg-gray-100">
								<tr>
									<th scope="col" class="px-6 py-3">Record ID</th>
									<th scope="col" class="px-6 py-3">Status</th>
									<th scope="col" class="px-6 py-3">Action</th>
									<th scope="col" class="px-6 py-3">Timestamp</th>
									<th scope="col" class="px-6 py-3">Actions</th>
								</tr>
							</thead>
							<tbody>
								for _, record := range recordStatuses {
									<tr class="bg-white border-b hover:bg-gray-50">
										<td class="px-6 py-4">{ record.ID }</td>
										<td class="px-6 py-4">
											if record.Processed {
												<span class="inline-flex items-center rounded-md bg-green-50 px-2 py-1 text-xs font-medium text-green-800 ring-1 ring-inset ring-green-600/20">
													Processed
												</span>
											} else {
												<span class="inline-flex items-center rounded-md bg-yellow-50 px-2 py-1 text-xs font-medium text-yellow-800 ring-1 ring-inset ring-yellow-600/20">
													Pending
												</span>
											}
										</td>
										<td class="px-6 py-4">
											<span class="inline-flex items-center rounded-md bg-blue-50 px-2 py-1 text-xs font-medium text-blue-800 ring-1 ring-inset ring-blue-600/20">
												{ record.Action }
											</span>
										</td>
										<td class="px-6 py-4">
											if !record.Timestamp.IsZero() {
												{ record.Timestamp.Format("2006-01-02 15:04:05") }
											} else {
												<span class="text-gray-400">—</span>
											}
										</td>
										<td class="px-6 py-4">
											if isStudentRelatedDomain(getTargetDomain(agg)) {
												<a
													href={ templ.URL(fmt.Sprintf("/admin/student/%s", record.ID)) }
													class="text-indigo-600 hover:text-indigo-900 inline-flex items-center"
												>
													<span class="mr-1">View Student</span>
													<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
														<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
														<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
													</svg>
												</a>
											}
										</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>
			</div>
		}
	</div>
}

templ viewStatusBadge(status string) {
	switch status {
		case "PENDING":
			<span class="inline-flex items-center rounded-md bg-yellow-50 px-2 py-1 text-xs font-medium text-yellow-800 ring-1 ring-inset ring-yellow-600/20">
				Pending
			</span>
		case "VALIDATING":
			<span class="inline-flex items-center rounded-md bg-blue-50 px-2 py-1 text-xs font-medium text-blue-800 ring-1 ring-inset ring-blue-600/20">
				Validating
			</span>
		case "PROCESSING":
			<span class="inline-flex items-center rounded-md bg-indigo-50 px-2 py-1 text-xs font-medium text-indigo-800 ring-1 ring-inset ring-indigo-600/20">
				Processing
			</span>
		case "COMPLETED":
			<span class="inline-flex items-center rounded-md bg-green-50 px-2 py-1 text-xs font-medium text-green-800 ring-1 ring-inset ring-green-600/20">
				Completed
			</span>
		case "VALIDATION_FAILED":
			<span class="inline-flex items-center rounded-md bg-red-50 px-2 py-1 text-xs font-medium text-red-800 ring-1 ring-inset ring-red-600/20">
				Validation Failed
			</span>
		case "INVALIDATING":
			<span class="inline-flex items-center rounded-md bg-purple-50 px-2 py-1 text-xs font-medium text-purple-800 ring-1 ring-inset ring-purple-600/20">
				Invalidating
			</span>
		case "INVALIDATED":
			<span class="inline-flex items-center rounded-md bg-gray-50 px-2 py-1 text-xs font-medium text-gray-800 ring-1 ring-inset ring-gray-600/20">
				Invalidated
			</span>
		case "LOCKED":
			<span class="inline-flex items-center rounded-md bg-gray-50 px-2 py-1 text-xs font-medium text-gray-800 ring-1 ring-inset ring-gray-600/20">
				Locked
			</span>
		default:
			<span class="inline-flex items-center rounded-md bg-gray-50 px-2 py-1 text-xs font-medium text-gray-800 ring-1 ring-inset ring-gray-600/20">
				{ status }
			</span>
	}
}

// Helper function to provide status explanation
templ viewStatusExplanation(status string) {
	switch status {
		case "PENDING":
			<div class="p-2 bg-yellow-50 rounded-md mt-2">
				<p>This upload is waiting to be processed. Click "Validate" to begin.</p>
			</div>
		case "VALIDATING":
			<div class="p-2 bg-blue-50 rounded-md mt-2">
				<p>The system is currently validating the uploaded data. You can wait or cancel the process.</p>
			</div>
		case "VALIDATED":
			<div class="p-2 bg-green-50 rounded-md mt-2">
				<p>Validation completed successfully. Click "Start Processing" to begin applying the changes for this bulk upload.</p>
			</div>
		case "PROCESSING":
			<div class="p-2 bg-indigo-50 rounded-md mt-2">
				<p>The system is processing the upload. Wait for completion or cancel if needed.</p>
			</div>
		case "COMPLETED":
			<div class="p-2 bg-green-50 rounded-md mt-2">
				<p>Processing completed successfully.</p>
			</div>
		case "VALIDATION_FAILED":
			<div class="p-2 bg-red-50 rounded-md mt-2">
				<p>Validation failed. Review the error message and validation errors below, then click "Retry" to attempt again.</p>
			</div>
		case "INVALIDATING":
			<div class="p-2 bg-purple-50 rounded-md mt-2">
				<p>The system is undoing changes made by this upload. Please wait.</p>
			</div>
		case "INVALIDATED":
			<div class="p-2 bg-gray-50 rounded-md mt-2">
				<p>This upload has been invalidated. All changes have been reverted.</p>
			</div>
		case "LOCKED":
			<div class="p-2 bg-gray-50 rounded-md mt-2">
				<p>This upload has been locked and cannot be modified.</p>
			</div>
		default:
			<div class="p-2 bg-gray-50 rounded-md mt-2">
				<p>Current status: { status }</p>
			</div>
	}
}

templ viewProgressBarWithPercentage(processed int, total int, hasErrors bool) {
	if total == 0 {
		@viewProgressBarEl(0, hasErrors)
	} else {
		@viewProgressBarEl(float64(processed)/float64(total)*100, hasErrors)
	}
}

templ viewProgressBarEl(percentage float64, hasErrors bool) {
	if hasErrors {
		<div
			class="h-2.5 rounded-full bg-yellow-500"
			style={ fmt.Sprintf("width: %.1f%%", percentage) }
		></div>
	} else {
		<div
			class="h-2.5 rounded-full bg-green-600"
			style={ fmt.Sprintf("width: %.1f%%", percentage) }
		></div>
	}
}

// Helper function to format domain name for display
templ viewFormatDomain(domain string) {
	switch domain {
		case "NEW_STUDENTS":
			<span>New Students</span>
		case "UPDATE_STUDENTS":
			<span>Update Students</span>
		default:
			<span>{ domain }</span>
	}
}

// Helper function to check if status is processing
func isProcessing(status string) bool {
	return status == "PROCESSING" || status == "VALIDATING" || status == "INVALIDATING"
}

// Helper function to check if invalidation is possible
func canInvalidate(status string) bool {
	return status == "COMPLETED"
}

func canValidate(status string) bool {
	return status == "PENDING" || status == "VALIDATION_FAILED" || status == "VALIDATED"
}

func canStartProcessing(status string) bool {
	return status == "VALIDATED"
}

// Helper function to check if we can cancel processing
func canCancel(status string) bool {
	return status == "VALIDATING" || status == "PROCESSING"
}

// Helper function to check if we can lock the upload
func canLock(status string) bool {
	return status != "LOCKED" && status != "PROCESSING" && status != "VALIDATING" && status != "INVALIDATING"
}

func getTargetDomain(agg *bulk_upload.Aggregate) string {
	return agg.GetDomain().String()
}

func getTotalRecords(agg *bulk_upload.Aggregate) uint64 {
	if agg == nil {
		return 0
	}
	records := agg.GetRecordStates()
	if records == nil {
		return 0
	}
	return uint64(len(records))
}

func getProcessedRecords(agg *bulk_upload.Aggregate) uint64 {
	if agg == nil {
		return 0
	}
	records := agg.GetRecordStates()
	if records == nil {
		return 0
	}
	processedCount := uint64(0)

	for _, actions := range records {
		if actions != nil && len(actions.RecordActions) > 0 {
			// Get the most recent action
			lastAction := actions.RecordActions[len(actions.RecordActions)-1]

			// Count as processed if it was created or updated
			if lastAction.Action == eda.BulkUpload_RecordAction_CREATED ||
				lastAction.Action == eda.BulkUpload_RecordAction_UPDATED {
				processedCount++
			}
		}
	}

	return processedCount
}

type StatusTimelineItem struct {
	Status    string
	Timestamp string
	Color     string
}

func getStatusTimestamps(agg *bulk_upload.Aggregate) []StatusTimelineItem {
	timestamps := bulk_upload.GetStatusTimestamps(agg)
	if timestamps == nil {
		return []StatusTimelineItem{}
	}

	result := make([]StatusTimelineItem, 0, len(timestamps))
	for _, ts := range timestamps {
		// Convert protobuf timestamp to time.Time
		t := ts.Timestamp.AsTime()

		// Get color based on status
		color := "bg-blue-500" // Default color
		switch ts.Status {
		case eda.BulkUpload_PENDING:
			color = "bg-blue-500"
		case eda.BulkUpload_VALIDATING:
			color = "bg-yellow-500"
		case eda.BulkUpload_VALIDATED:
			color = "bg-green-500"
		case eda.BulkUpload_VALIDATION_FAILED:
			color = "bg-red-500"
		case eda.BulkUpload_PROCESSING:
			color = "bg-purple-500"
		case eda.BulkUpload_COMPLETED:
			color = "bg-green-700"
		case eda.BulkUpload_ERROR:
			color = "bg-red-700"
		case eda.BulkUpload_INVALIDATING:
			color = "bg-orange-500"
		case eda.BulkUpload_INVALIDATED:
			color = "bg-gray-500"
		case eda.BulkUpload_INVALIDATION_FAILED:
			color = "bg-red-500"
		}

		item := StatusTimelineItem{
			Status:    ts.Status.String(),
			Timestamp: t.Format(time.RFC1123),
			Color:     color,
		}
		result = append(result, item)
	}

	// Sort by timestamp (oldest first)
	sort.Slice(result, func(i, j int) bool {
		t1, _ := time.Parse(time.RFC1123, result[i].Timestamp)
		t2, _ := time.Parse(time.RFC1123, result[j].Timestamp)
		return t1.Before(t2)
	})

	return result
}

func getUploadMetadata(agg *bulk_upload.Aggregate) map[string]string {
	return agg.GetUploadMetadata()
}

func getValidationErrors(agg *bulk_upload.Aggregate) []*eda.BulkUpload_ValidationError {
	return agg.GetValidationErrors()
}

// Helper function to format the validation context enum as a string
func formatValidationContext(context eda.BulkUpload_ValidationError_Context) string {
	switch context {
	case eda.BulkUpload_ValidationError_ROW_NUMBER:
		return "Row"
	case eda.BulkUpload_ValidationError_METADATA_FIELD:
		return "Metadata"
	case eda.BulkUpload_ValidationError_CSV_HEADER:
		return "Header"
	case eda.BulkUpload_ValidationError_CSV_DATA:
		return "Data"
	default:
		return context.String()
	}
}

// Helper function to get error message if available
func getErrorMessage(agg *bulk_upload.Aggregate) string {
	// In a real implementation, we would get the error message from the aggregate
	// For failed statuses like VALIDATION_FAILED or similar
	if getStatus(agg) == "VALIDATION_FAILED" {
		return "Failed to validate the upload: Some required fields are missing or invalid. Please check the validation errors below and try again."
	}
	return "" // No error message by default
}

// Helper function to safely access aggregate data
func getStatus(agg *bulk_upload.Aggregate) string {
	return agg.GetStatus().String()
}

// RecordStatus holds a single record's processing status
type RecordStatus struct {
	ID        string
	Processed bool
	Action    string
	Timestamp time.Time
}

// Helper function to get record processing statuses in a deterministic order
func getRecordProcessingStatuses(agg *bulk_upload.Aggregate) []RecordStatus {
	if agg == nil {
		return []RecordStatus{}
	}

	recordActions := agg.GetRecordStates()
	if recordActions == nil {
		return []RecordStatus{}
	}

	result := make([]RecordStatus, 0, len(recordActions))

	// Extract keys (record IDs) from the map
	recordIDs := make([]string, 0, len(recordActions))
	for id := range recordActions {
		recordIDs = append(recordIDs, id)
	}

	// Sort the record IDs for deterministic rendering
	slices.Sort(recordIDs)

	// Create a sorted slice of RecordStatus structs
	for _, id := range recordIDs {
		if recordActions[id] == nil {
			continue
		}

		// Get the actions for this record
		actions := recordActions[id].RecordActions

		// Default values
		processed := false
		actionStr := "UNKNOWN"
		var timestamp time.Time

		// If we have actions, use the most recent one
		if len(actions) > 0 {
			// Get the most recent action (last in the array)
			lastAction := actions[len(actions)-1]

			// Consider a record processed if it was created or updated
			processed = lastAction.Action == eda.BulkUpload_RecordAction_CREATED ||
				lastAction.Action == eda.BulkUpload_RecordAction_UPDATED

			// Get the action string and timestamp
			actionStr = lastAction.Action.String()
			if lastAction.Timestamp != nil {
				timestamp = lastAction.Timestamp.AsTime()
			}
		}

		result = append(result, RecordStatus{
			ID:        id,
			Processed: processed,
			Action:    actionStr,
			Timestamp: timestamp,
		})
	}

	return result
}

// Helper function to check if domain is student-related
func isStudentRelatedDomain(domain string) bool {
	return domain == "GRADES" || domain == "HEALTH_ASSESSMENT" || domain == "NEW_STUDENTS" || domain == "UPDATE_STUDENTS"
}
