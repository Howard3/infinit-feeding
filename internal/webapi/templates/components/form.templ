package components

templ FormWrapper(title, postURL, returnURL string) {
	<div class="max-w-md mx-auto p-6 bg-white rounded-lg shadow-lg space-y-6">
		<div class="flex items-center">
			<button
				hx-get={ string(templ.URL(returnURL)) }
				class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-6 w-6 p-1"
			>
				<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M10 19l-7-7m0 0l7-7m-7 7h18"
					></path>
				</svg>
			</button>
			<h1 class="text-3xl font-bold ml-4">{ title }</h1>
		</div>
		<form class="space-y-4" hx-post={ string(templ.URL(postURL)) }>
			{ children... }
		</form>
	</div>
}

// TODO: make autocomplete/1p ignore configurable
templ TextField(label, fieldName, placeholder, value string) {
	<div class="space-y-2">
		<label
			class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
            for={ fieldName }
		>
			{ label }
		</label>
		<input
			class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
			id={ fieldName }
			name={ fieldName }
			placeholder={ placeholder }
			required=""
			value={ value }
            autocomplete="off"
            data-1p-ignore
		/>
	</div>
}

templ PasswordField(label, fieldName, placeholder, value string) {
	<div class="space-y-2">
		<label
			class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
			for={ fieldName }
		>
			{ label }
		</label>
		<input
			class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
			id={ fieldName }
			name={ fieldName }
			placeholder={ placeholder }
			required=""
			value={ value }
            autocomplete="off"
            type="password"
		/>
	</div>
}

templ EmailField(label, fieldName, placeholder, value string) {
	<div class="space-y-2">
		<label
			class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
			for={ fieldName }
		>
			{ label }
		</label>
		<input
			class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
			id={ fieldName }
			name={ fieldName }
			placeholder={ placeholder }
			required=""
			value={ value }
            autocomplete="email"
            type="email"
		/>
	</div>
}

templ DateField(label, fieldName, value string) {
	<div class="space-y-2">
		<label
			class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
			for="dob"
		>
			{ label }
		</label>
		<input
			class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
			id={ fieldName }
			name={ fieldName }
			value={ value }
			type="date"
		/>
	</div>
}

templ HiddenField(fieldName, value string) {
	<input
		type="hidden"
		name={ fieldName }
		value={ value }
	/>
}

templ SubmitButton(label string) {
	@PrimaryButton(label, nil)
}

templ PrimaryButton(label string, attrs templ.Attributes) {
	<button
		{ attrs... }
		class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
	>
		{ label }
	</button>
}

templ SecondaryButton(label string, attrs templ.Attributes) {
	<button
		{ attrs... }
		class="rounded-md bg-white px-3 py-2 text-sm font-semibold text-indigo-600 shadow-sm ring-1 ring-inset ring-indigo-300 hover:bg-indigo-50 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
	>
		{ label }
	</button>
}

templ DangerButton(label string, attrs templ.Attributes) {
	<button
		{ attrs... }
		class="rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-red-600"
	>
		{ label }
	</button>
}

templ Button(label string, attrs templ.Attributes) {
	<a
		{ attrs... }
		class="cursor-pointer text-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
	>
		{ label }
	</a>
}

type SelectConfig struct {
	Options     map[string]string
	Name        string
	Placeholder string
	MaxItems    int
	Value       string
}

templ TomSelect(cfg SelectConfig) {
	<input id={ cfg.Name } name={ cfg.Name } type="hidden" value={ cfg.Value }/>
	@tomSelectConfig(cfg)
}

script tomSelectConfig(cfg SelectConfig) {
    document.addEventListener("htmx:load", function() {
        const options = Object.keys(cfg.Options).map(function(value) {
            return { value, text: cfg.Options[value] }
        });
        var settings = {options, maxItems: cfg.MaxItems, placeholder: cfg.Placeholder};
        new TomSelect('#'+cfg.Name, settings);
    });
}
