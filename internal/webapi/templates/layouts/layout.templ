package layouts 

import (
	"os"
	"geevly/internal/buildinfo"
)

func getClerkPublishableKey() string {
	clerkPublishableKey := os.Getenv("CLERK_PUBLISHABLE_KEY")
	return clerkPublishableKey
}

func getCacheVersion() string {
	return buildinfo.CacheVersion()
}

func getBuildInfo() map[string]string {
	return buildinfo.GetBuildInfo()
}

func getDisplayVersion() string {
	return buildinfo.GetDisplayVersion()
}

func getBuildDate() string {
	return buildinfo.GetBuildDate()
}

templ FullLayout(main templ.Component, params Params) {
	<!DOCTYPE html>
	<html>
		<head>
			<title>Infinit Feeding</title>
			<link rel="stylesheet" href={ "/static/output.css?v=" + getCacheVersion() }/>
			<link rel="stylesheet" href={ "/static/tom-select.css?v=" + getCacheVersion() }/>
			<script type="module" src={ "/static/htmx.min.js?v=" + getCacheVersion() }></script>
			<script type="module" src={ "/static/compressor.min.js?v=" + getCacheVersion() }></script>
			<script type="module" src={ "/static/tom-select.complete.min.js?v=" + getCacheVersion() }></script>
            <script src={ "/static/jslib-html5-camera-photo.min.js?v=" + getCacheVersion() }></script>
			<script src={ "/static/d3.v7.min.js?v=" + getCacheVersion() }></script>
			<script src={ "/static/cal-heatmap.min.js?v=" + getCacheVersion() }></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
            <script src={ "/static/html5-qrcode.min.js?v=" + getCacheVersion() }></script>

            <link rel="stylesheet" href={ "/static/cal-heatmap.css?v=" + getCacheVersion() }/>
            <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			@templ.JSONScript("params", params.export())
			// TODO: embed clerk in the project, don't load from CDN
			<script src="https://cdn.jsdelivr.net/npm/clerk-js@2.16.0/dist/clerk.browser.min.js"></script>
			// load clerk
            <script
              async
              crossorigin="anonymous"
              data-clerk-publishable-key={ getClerkPublishableKey() }
              src="https://subtle-stingray-12.clerk.accounts.dev/npm/@clerk/clerk-js@latest/dist/clerk.browser.js"
              type="text/javascript"
            ></script>
            <script>
				function readParamsValue(key) {
					const element = document.getElementById('params');
					const params = JSON.parse(element.textContent);
					return params[key];
				}

                window.addEventListener('load', async function () {
                    await Clerk.load()
					if (readParamsValue('IsSignedIn')) {
						Clerk.mountUserButton(document.getElementById('user-button'));
					}
                })
            </script>
            <script>
                // refresh tokens every 45 seconds
                (() => {
                    let token = null;
                    refresh = async function(){
                        if (!Clerk || !Clerk.session) {
                            return
                        }
                        token = await Clerk.session.getToken()
                    }
                    setInterval(this.refresh, 45_000)
                })()
            // Handle 403 responses from HTMX requests by refreshing token and retrying once
            document.body.addEventListener('htmx:beforeRequest', async function(evt) {
                evt.detail.xhr.addEventListener('load', async function() {
                    if (this.status === 403 && !evt.detail.retriedAfterRefresh) {
                        evt.detail.retriedAfterRefresh = true;
                        if (Clerk && Clerk.session) {
                            // Refresh token
                            await Clerk.session.getToken();
                            // Retry the original request
                            htmx.ajax(evt.detail.requestConfig.method, 
                                    evt.detail.requestConfig.path,
                                    evt.detail);
                        }
                    }
                });
            });
            </script>
            // TODO: Make posthog configurable
            <script>
                !function(t,e){var o,n,p,r;e.__SV||(window.posthog=e,e._i=[],e.init=function(i,s,a){function g(t,e){var o=e.split(".");2==o.length&&(t=t[o[0]],e=o[1]),t[e]=function(){t.push([e].concat(Array.prototype.slice.call(arguments,0)))}}(p=t.createElement("script")).type="text/javascript",p.crossOrigin="anonymous",p.async=!0,p.src=s.api_host.replace(".i.posthog.com","-assets.i.posthog.com")+"/static/array.js",(r=t.getElementsByTagName("script")[0]).parentNode.insertBefore(p,r);var u=e;for(void 0!==a?u=e[a]=[]:a="posthog",u.people=u.people||[],u.toString=function(t){var e="posthog";return"posthog"!==a&&(e+="."+a),t||(e+=" (stub)"),e},u.people.toString=function(){return u.toString(1)+".people (stub)"},o="init capture register register_once register_for_session unregister unregister_for_session getFeatureFlag getFeatureFlagPayload isFeatureEnabled reloadFeatureFlags updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures on onFeatureFlags onSessionId getSurveys getActiveMatchingSurveys renderSurvey canRenderSurvey getNextSurveyStep identify setPersonProperties group resetGroups setPersonPropertiesForFlags resetPersonPropertiesForFlags setGroupPropertiesForFlags resetGroupPropertiesForFlags reset get_distinct_id getGroups get_session_id get_session_replay_url alias set_config startSessionRecording stopSessionRecording sessionRecordingStarted captureException loadToolbar get_property getSessionProperty createPersonProfile opt_in_capturing opt_out_capturing has_opted_in_capturing has_opted_out_capturing clear_opt_in_out_capturing debug".split(" "),n=0;n<o.length;n++)g(u,o[n]);e._i.push([i,s,a])},e.__SV=1)}(document,window.posthog||[]);
                posthog.init('phc_J5LWIbUbSoCcHYGOAblDIALizP6o0dKIu46vyDgLYmg',{api_host:'https://us.i.posthog.com', person_profiles: 'identified_only' // or 'always' to create profiles for anonymous users as well
                    })
            </script>
			<script src={ "/static/posthog.js?v=" + getCacheVersion() }></script> // Posthog hooks & configuration
		</head>
		<body>
			<div class="flex flex-col min-h-screen bg-gray-100 print:bg-transparent">
				@header(params)
 			<div class="flex flex-col w-full rounded-lg shadow mx-auto container mt-3 bg-white mb-3 border-gray-300 border-2 print:shadow-none print:border-0 print:bg-transparent print:mt-0 print:mb-0 print:rounded-none print:mx-0 print:px-0 print:w-full print:max-w-none">
					<div id="content" hx-target="#content" hx-swap="innerHTML" hx-push-url="true">
						@main
					</div>
				</div>
				@footer()
			</div>
		</body>
	</html>
}

templ HTMXLayout(main templ.Component, params Params) {
	@main
}

templ header(params Params) {
	<header class="border-b bg-white shadow print:hidden" hx-target="#content" hx-swap="innerHTML" hx-push-url="true">
		<div class="flex items-center h-14 px-4 border-b gap-4">
			<a class="text-lg font-semibold cursor-pointer hover:text-gray-800" hx-get="/admin">
				<img src={ "/static/img/infinity.svg?v=" + getCacheVersion() } class="h-6 inline-block"/> Feeding
			</a>
			<nav class="flex-1 flex justify-between items-center">
				<div class="flex space-x-4">
					if (params.IsAdmin) {
						<a class="flex h-8 items-center justify-center rounded-md hover:underline cursor-pointer" hx-get="/admin">
							Admin
						</a>
					}
					if (params.IsFeeder) {
						<a class="flex h-8 items-center justify-center rounded-md hover:underline cursor-pointer" hx-get="/staff">
							Staff
						</a>
					}
					<a class="flex h-8 items-center justify-center rounded-md hover:underline cursor-pointer" hx-get="/feeding">
						Feeding
					</a>
				</div>
				if (params.IsSignedIn) {
					<div class="flex-shrink-0" id="user-button"></div>
				} else {
					<a class="flex h-8 items-center justify-center rounded-md hover:underline cursor-pointer" hx-get="/sign-in">
						Sign In
					</a>
				}
			</nav>
		</div>
	</header>
}

templ footer() {
	<footer class="bg-gray-50 border-t border-gray-200 py-4 mt-auto print:hidden">
		<div class="container mx-auto px-4">
			<div class="flex flex-col md:flex-row justify-between items-center text-sm text-gray-500">
				<div class="flex items-center space-x-4">
					<span>{ getDisplayVersion() }</span>
					<span class="hidden md:inline">•</span>
					<span class="hidden md:inline">Built { getBuildDate() }</span>
				</div>
				<div class="flex items-center space-x-2 mt-2 md:mt-0">
					<span 
						class="text-xs cursor-help hover:text-gray-700 transition-colors" 
						title={ "Version: " + getDisplayVersion() + " | Build: " + getBuildDate() + " | Cache: " + getCacheVersion() }
					>
						ⓘ
					</span>
				</div>
			</div>
		</div>

	</footer>
}
